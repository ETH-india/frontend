'use client';
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import React, { useState, useEffect } from 'react';
import useAccessToken from './hooks/useAccessToken';
import { useAtom } from 'jotai';
import { modalAtom } from './store/modalStore';
import SVGComponent from './microphone';
import useWalletFunctions from './hooks/useWalletFunctions';

const inter = Inter({ subsets: ['latin'] });

// export const metadata: Metadata = {
//   title: 'IRIS',
//   description: 'Generated by create next app',
// }

export default function RootLayout({
	children,
}: {
	children: React.ReactNode;
}) {
	const [listening, setListening] = useState(false);
	const [text, setText] = useState('');
	const [showModal, setShowModal] = useAtom(modalAtom);
	const { walletOperations, data, setData } = useWalletFunctions();
	const [action, setAction] = useState<string>('');
	const { accessToken, getNewAccessToken } = useAccessToken();

	useEffect(() => {
		const SpeechRecognition =
			window.SpeechRecognition || window.webkitSpeechRecognition;
		const recognition = new SpeechRecognition();
		recognition.continuous = true;
		recognition.onresult = (event) => {
			for (let i = event.resultIndex; i < event.results.length; i++) {
				const transcript = event.results[i][0].transcript.trim();
				setText(transcript);
				if (transcript.toLowerCase().includes('iris')) {
					// setShowModal(true);
					setListening(false);
					recognition.stop();
				}
			}
		};

		if (listening) {
			recognition.start();
		} else {
			recognition.stop();
		}

		return () => recognition.abort();
	}, [listening]);

	// useEffect(() => {
	// 	initializeWallet();
	// }, []);

	const handleStartListening = () => {
		console.log('Getting new access token');

		setListening(true);
	};

	const handleStopListening = () => {
		setListening(false);
	};

	const handleSendApiCall = () => {
		// Replace with your API call function
		console.log('Sending:', text);
	};

	return (
		<html lang='en'>
			<body className={inter.className}>
				{showModal && (
					<div className='fixed inset-0 left-[55%]'>
						<div className='absolute top-[68px] right-[7px]'>
							<div className='voice-elt'>
								<div className='spinner-border'>
									<div className='spinner'>
										<div className='spinner-inside'></div>
									</div>
								</div>

								<div
									style={{
										width: 'max-content',
										padding: '1.2rem',
										border: '1px solid #e0e0e0',
										boxShadow: '0px 0px 10px 0px #e0e0e0',
										background: 'white',
										borderRadius: '12px 12px 12px 12px',
										justifyContent: 'center',
										alignItems: 'center',
										position: 'absolute',
										right: '0rem',
										top: '7rem',
									}}
								>
									<div
										style={{
											color: 'black',
											fontSize: '13px',
											fontWeight: 500,
										}}
									>
										{data ? data : 'loading...'}
									</div>
								</div>
								<br />
							</div>
							{/* <button onClick={handleSendApiCall}>Send</button>
            <button onClick={() => setShowModal(false)}>Close</button> */}
						</div>
						<div className='floatingButton'>
							{/* <input
                    type='text'
                    style={{ color: 'black' }}
                    value={action}
                    onChange={(e) => setAction(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter')
                        walletOperations(action);
                    }}
                  /> */}

							<button
								style={{
									borderRadius: '50%',
									padding: '1rem',
								}}
								onMouseDown={handleStartListening}
								onMouseUp={() => {
									handleStopListening();
									walletOperations(text);
								}}
								onTouchStart={handleStartListening} // For touch devices
								onTouchEnd={() => {
									handleStopListening();
									walletOperations(text);
								}}
							>
								<SVGComponent></SVGComponent>
							</button>
						</div>
						<div className='right-[339px]'>
							{/* <input
                    type='text'
                    style={{ color: 'black' }}
                    value={action}
                    onChange={(e) => setAction(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter')
                        walletOperations(action);
                    }}
                  /> */}
							{listening ? (
								<div className='fixed right-[270px] bottom-[65px]'>
									<div className='circle'></div>
									<div className='circle'></div>
									<div className='circle'></div>
									<div className='circle'></div>
									<div className='circle'></div>
									<div className='circle'></div>
									<div className='circle'></div>
									<div className='circle'></div>
								</div>
							) : (
								<h3
									style={{
										color: 'black',
										position: 'fixed',
										width: '400px',
										padding: '1rem',
										borderRadius: '12px 12px 12px 12px',
										maxHeight: '50px',
										overflow: 'scroll',
										maxWidth: '300px',
										right: '28px',
										bottom: '20px',
										border: '1px black solid',
									}}
								>
									{text}
								</h3>
							)}
						</div>
					</div>
				)}
				{children}
			</body>
		</html>
	);
}
